#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('_example:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '7070');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

////////////////
// CHAT ROOM //
///////////////

// add socket stuff here!
var io = require('socket.io')(server);
console.log('before connection');
var rooms = [];

// Set the socket to the name that is entered. This is the username.
io.on('connection', function(socket) {
  console.log('inside first connection');
  socket.on('setName', function(id) {
    socket.name = id;
    console.log('socket.name ', socket.name);
  });

  // Create a room that is named the name of the user. Push that into the rooms array so it can be
  // saved and accessed easily. Join that room. Loop through the sockets that are connected and if 
  // the name equals the name of the invitee, invite them to the private room.
  socket.on('createRoom', function(name, invitee) {
    socket.room = name;
    rooms.push(name);
    socket.join(name);
    console.log('originalUser ', name);
    console.log('invitee ' +invitee);

      for (a in io.sockets.connected) {
        if (io.sockets.connected[a].name === invitee) {
          // In the second input, put the name of the person you want the
          // link sent to. It will  send as long as they are connected.
          io.sockets.connected[a].emit('privateChat', '<a onclick="socket.emit(\'joinRoom\', \''+name+'\')">Join '+ socket.name +'\'s private chat</a>' );
          break;
        }
      }
  });
  // Join that private room.
  socket.on('joinRoom', function(name) {
    socket.room = name;
    socket.join(name);
  });
  // Send the messages between the 2 users.
  socket.on('chat message', function(msg) {
    // console.log(socket.room);
    io.sockets.in(socket.room).emit('chat message', msg);
  });
});

////////////////////
// END CHAT ROOM //
///////////////////


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

// *
//  * Event listener for HTTP server "error" event.
 

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on ' + bind);
}
